import { HashFunction } from '../../types';
/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
export declare class HashMap<K, V> {
    get hashFn(): HashFunction<K>;
    set hashFn(value: HashFunction<K>);
    get table(): Array<Array<[K, V]>>;
    set table(value: Array<Array<[K, V]>>);
    get capacityMultiplier(): number;
    set capacityMultiplier(value: number);
    get loadFactor(): number;
    set loadFactor(value: number);
    get initialCapacity(): number;
    set initialCapacity(value: number);
    get size(): number;
    set size(value: number);
    private _initialCapacity;
    private _loadFactor;
    private _capacityMultiplier;
    private _size;
    private _table;
    private _hashFn;
    /**
     * The constructor initializes the properties of a hash table, including the initial capacity, load factor, capacity
     * multiplier, size, table array, and hash function.
     * @param [initialCapacity=16] - The initial capacity is the initial size of the hash table. It determines the number of
     * buckets or slots available for storing key-value pairs. The default value is 16.
     * @param [loadFactor=0.75] - The load factor is a measure of how full the hash table can be before it is resized. It is
     * a value between 0 and 1, where 1 means the hash table is completely full and 0 means it is completely empty. When the
     * load factor is reached, the hash table will
     * @param [hashFn] - The `hashFn` parameter is an optional parameter that represents the hash function used to calculate
     * the index of a key in the hash table. If a custom hash function is not provided, a default hash function is used. The
     * default hash function converts the key to a string, calculates the sum of the
     */
    constructor(initialCapacity?: number, loadFactor?: number, hashFn?: HashFunction<K>);
    private _hash;
    /**
     * The `resizeTable` function resizes the table used in a hash map by creating a new table with a specified capacity and
     * rehashing the key-value pairs from the old table into the new table.
     * @param {number} newCapacity - The newCapacity parameter is the desired capacity for the resized table. It represents
     * the number of buckets that the new table should have.
     */
    private resizeTable;
    set(key: K, value: V): void;
    get(key: K): V | undefined;
    remove(key: K): void;
    entries(): IterableIterator<[K, V]>;
    [Symbol.iterator](): IterableIterator<[K, V]>;
    clear(): void;
    isEmpty(): boolean;
}
