/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
import { BST, BSTNode } from './bst';
import type { AVLTreeNodeNested, AVLTreeOptions, BinaryTreeDeletedResult, BinaryTreeNodeKey } from '../../types';
import { IBinaryTree } from '../../interfaces';
export declare class AVLTreeNode<V = any, FAMILY extends AVLTreeNode<V, FAMILY> = AVLTreeNodeNested<V>> extends BSTNode<V, FAMILY> {
    height: number;
    constructor(key: BinaryTreeNodeKey, val?: V);
}
export declare class AVLTree<N extends AVLTreeNode<N['val'], N> = AVLTreeNode> extends BST<N> implements IBinaryTree<N> {
    /**
     * This is a constructor function for an AVL tree data structure in TypeScript.
     * @param {AVLTreeOptions} [options] - The `options` parameter is an optional object that can be passed to the
     * constructor of the AVLTree class. It allows you to customize the behavior of the AVL tree by providing different
     * options.
     */
    constructor(options?: AVLTreeOptions);
    /**
     * The `swapLocation` function swaps the location of two nodes in a binary tree.
     * @param {N} srcNode - The source node that you want to swap with the destination node.
     * @param {N} destNode - The `destNode` parameter represents the destination node where the values from `srcNode` will
     * be swapped to.
     * @returns The `destNode` is being returned.
     */
    swapLocation(srcNode: N, destNode: N): N;
    /**
     * The function creates a new AVL tree node with the given key and value.
     * @param {BinaryTreeNodeKey} key - The `key` parameter is the identifier for the binary tree node. It is used to uniquely
     * identify each node in the tree.
     * @param [val] - The `val` parameter is an optional value that can be assigned to the node. It represents the value
     * that will be stored in the node.
     * @returns a new AVLTreeNode object with the specified key and value.
     */
    createNode(key: BinaryTreeNodeKey, val?: N['val']): N;
    /**
     * The function overrides the add method of a binary tree node and balances the tree after inserting a new node.
     * @param {BinaryTreeNodeKey} key - The `key` parameter is the identifier of the binary tree node that we want to add.
     * @param [val] - The `val` parameter is an optional value that can be assigned to the node being added. It is of type
     * `N['val']`, which means it should be of the same type as the `val` property of the nodes in the binary tree.
     * @returns The method is returning the inserted node, or null or undefined if the insertion was not successful.
     */
    add(key: BinaryTreeNodeKey, val?: N['val']): N | null | undefined;
    /**
     * The function overrides the remove method of a binary tree and performs additional operations to balance the tree after
     * deletion.
     * @param {BinaryTreeNodeKey} key - The `key` parameter represents the identifier of the binary tree node that needs to be
     * removed.
     * @returns The method is returning an array of `BinaryTreeDeletedResult<N>` objects.
     */
    remove(key: BinaryTreeNodeKey): BinaryTreeDeletedResult<N>[];
    /**
     * The balance factor of a given AVL tree node is calculated by subtracting the height of its left subtree from the
     * height of its right subtree.
     * @param node - The parameter "node" is of type N, which represents a node in an AVL tree.
     * @returns The balance factor of the given AVL tree node.
     */
    protected _balanceFactor(node: N): number;
    /**
     * The function updates the height of a node in an AVL tree based on the heights of its left and right subtrees.
     * @param node - The parameter `node` is an AVLTreeNode object, which represents a node in an AVL tree.
     */
    protected _updateHeight(node: N): void;
    /**
     * The `_balancePath` function balances the AVL tree by performing appropriate rotations based on the balance factor of
     * each node in the path from the given node to the root.
     * @param node - The `node` parameter is an AVLTreeNode object, which represents a node in an AVL tree.
     */
    protected _balancePath(node: N): void;
    /**
     * The `_balanceLL` function performs a left-left rotation on an AVL tree to balance it.
     * @param A - The parameter A is an AVLTreeNode object.
     */
    protected _balanceLL(A: N): void;
    /**
     * The `_balanceLR` function performs a left-right rotation to balance an AVL tree.
     * @param A - A is an AVLTreeNode object.
     */
    protected _balanceLR(A: N): void;
    /**
     * The `_balanceRR` function performs a right-right rotation on an AVL tree to balance it.
     * @param A - The parameter A is an AVLTreeNode object.
     */
    protected _balanceRR(A: N): void;
    /**
     * The `_balanceRL` function performs a right-left rotation to balance an AVL tree.
     * @param A - A is an AVLTreeNode object.
     */
    protected _balanceRL(A: N): void;
}
