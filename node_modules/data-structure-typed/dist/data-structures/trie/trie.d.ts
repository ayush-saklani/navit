/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
/**
 * TrieNode represents a node in the Trie data structure. It holds a character key, a map of children nodes,
 * and a flag indicating whether it's the end of a word.
 */
export declare class TrieNode {
    constructor(key: string);
    private _key;
    get key(): string;
    set key(v: string);
    protected _children: Map<string, TrieNode>;
    get children(): Map<string, TrieNode>;
    set children(v: Map<string, TrieNode>);
    protected _isEnd: boolean;
    get isEnd(): boolean;
    set isEnd(v: boolean);
}
/**
 * Trie represents a Trie data structure. It provides basic Trie operations and additional methods.
 */
export declare class Trie {
    constructor(words?: string[], caseSensitive?: boolean);
    protected _root: TrieNode;
    get root(): TrieNode;
    set root(v: TrieNode);
    private readonly _caseSensitive;
    /**
     * Add a word to the Trie structure.
     * @param {string} word - The word to add.
     * @returns {boolean} True if the word was successfully added.
     */
    add(word: string): boolean;
    /**
     * Check if the Trie contains a given word.
     * @param {string} word - The word to check for.
     * @returns {boolean} True if the word is present in the Trie.
     */
    has(word: string): boolean;
    private _caseProcess;
    /**
     * Remove a word from the Trie structure.
     * @param{string} word - The word to remove.
     * @returns {boolean} True if the word was successfully removed.
     */
    remove(word: string): boolean;
    getHeight(): number;
    /**
     * Check if a given input string has an absolute prefix in the Trie, meaning it's not a complete word.
     * @param {string} input - The input string to check.
     * @returns {boolean} True if it's an absolute prefix in the Trie.
     */
    hasPurePrefix(input: string): boolean;
    /**
     * Check if a given input string is a prefix of any existing word in the Trie, whether as an absolute prefix or a complete word.
     * @param {string} input - The input string representing the prefix to check.
     * @returns {boolean} True if it's a prefix in the Trie.
     */
    hasPrefix(input: string): boolean;
    /**
     * Check if the input string is a common prefix in the Trie, meaning it's a prefix shared by all words in the Trie.
     * @param {string} input - The input string representing the common prefix to check for.
     * @returns {boolean} True if it's a common prefix in the Trie.
     */
    hasCommonPrefix(input: string): boolean;
    /**
     * Get the longest common prefix among all the words stored in the Trie.
     * @returns {string} The longest common prefix found in the Trie.
     */
    getLongestCommonPrefix(): string;
    /**
     * The `getAll` function returns an array of all words in a Trie data structure that start with a given prefix.
     * @param {string} prefix - The `prefix` parameter is a string that represents the prefix that we want to search for in the
     * trie. It is an optional parameter, so if no prefix is provided, it will default to an empty string.
     * @param {number} max - The max count of words will be found
     * @returns {string[]} an array of strings.
     */
    getWords(prefix?: string, max?: number): string[];
}
