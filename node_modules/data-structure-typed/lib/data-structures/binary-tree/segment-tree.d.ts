/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
import type { SegmentTreeNodeVal } from '../../types';
export declare class SegmentTreeNode {
    constructor(start: number, end: number, sum: number, val?: SegmentTreeNodeVal | null);
    private _start;
    get start(): number;
    set start(v: number);
    private _end;
    get end(): number;
    set end(v: number);
    private _val;
    get val(): SegmentTreeNodeVal | null;
    set val(v: SegmentTreeNodeVal | null);
    private _sum;
    get sum(): number;
    set sum(v: number);
    private _left;
    get left(): SegmentTreeNode | null;
    set left(v: SegmentTreeNode | null);
    private _right;
    get right(): SegmentTreeNode | null;
    set right(v: SegmentTreeNode | null);
}
export declare class SegmentTree {
    /**
     * The constructor initializes the values, start, end, and root properties of an object.
     * @param {number[]} values - An array of numbers that will be used to build a binary search tree.
     * @param {number} [start] - The `start` parameter is the index of the first element in the `values` array that should
     * be included in the range. If no value is provided for `start`, it defaults to 0, which means the range starts from
     * the beginning of the array.
     * @param {number} [end] - The "end" parameter is the index of the last element in the "values" array that should be
     * included in the range. If not provided, it defaults to the index of the last element in the "values" array.
     */
    constructor(values: number[], start?: number, end?: number);
    private _values;
    get values(): number[];
    private _start;
    get start(): number;
    private _end;
    get end(): number;
    private _root;
    get root(): SegmentTreeNode | null;
    /**
     * The build function creates a segment tree by recursively dividing the given range into smaller segments and assigning
     * the sum of values to each segment.
     * @param {number} start - The `start` parameter represents the starting index of the segment or range for which we are
     * building the segment tree.
     * @param {number} end - The "end" parameter represents the ending index of the segment or range for which we want to
     * build a segment tree.
     * @returns a SegmentTreeNode object.
     */
    build(start: number, end: number): SegmentTreeNode;
    /**
     * The function updates the value of a node in a segment tree and recalculates the sum of its children if they exist.
     * @param {number} index - The index parameter represents the index of the node in the segment tree that needs to be
     * updated.
     * @param {number} sum - The `sum` parameter represents the new value that should be assigned to the `sum` property of
     * the `SegmentTreeNode` at the specified `index`.
     * @param {SegmentTreeNodeVal} [val] - The `val` parameter is an optional value that can be assigned to the `val`
     * property of the `SegmentTreeNode` object. It is not currently used in the code, but you can uncomment the line `//
     * cur.val = val;` and pass a value for `val` in the
     * @returns The function does not return anything.
     */
    updateNode(index: number, sum: number, val?: SegmentTreeNodeVal): void;
    /**
     * The function `querySumByRange` calculates the sum of values within a given range in a segment tree.
     * @param {number} indexA - The starting index of the range for which you want to calculate the sum.
     * @param {number} indexB - The parameter `indexB` represents the ending index of the range for which you want to
     * calculate the sum.
     * @returns The function `querySumByRange` returns a number.
     */
    querySumByRange(indexA: number, indexB: number): number;
    protected _setValues(value: number[]): void;
    protected _setStart(value: number): void;
    protected _setEnd(value: number): void;
    protected _setRoot(v: SegmentTreeNode | null): void;
}
