import { BinaryTreeNodeKey, RBColor, RBTreeNodeNested, RBTreeOptions } from '../../types';
import { IBinaryTree } from '../../interfaces';
import { BST, BSTNode } from './bst';
export declare class RBTreeNode<V = any, FAMILY extends RBTreeNode<V, FAMILY> = RBTreeNodeNested<V>> extends BSTNode<V, FAMILY> {
    private _color;
    constructor(key: BinaryTreeNodeKey, val?: V);
    get color(): RBColor;
    set color(value: RBColor);
}
export declare class RBTree<N extends RBTreeNode<N['val'], N> = RBTreeNode> extends BST<N> implements IBinaryTree<N> {
    constructor(options?: RBTreeOptions);
    createNode(key: BinaryTreeNodeKey, val?: N['val']): N;
}
