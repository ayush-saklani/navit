/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
import { DoublyLinkedList } from '../linked-list';
export declare class Deque<E = any> extends DoublyLinkedList<E> {
}
export declare class ObjectDeque<E = number> {
    constructor(capacity?: number);
    private _nodes;
    get nodes(): {
        [p: number]: E;
    };
    private _capacity;
    get capacity(): number;
    set capacity(value: number);
    private _first;
    get first(): number;
    set first(value: number);
    private _last;
    get last(): number;
    set last(value: number);
    private _size;
    get size(): number;
    /**
     * The "addFirst" function adds a value to the beginning of an array-like data structure.
     * @param {E} value - The `value` parameter represents the value that you want to add to the beginning of the data
     * structure.
     */
    addFirst(value: E): void;
    /**
     * The addLast function adds a value to the end of an array-like data structure.
     * @param {E} value - The `value` parameter represents the value that you want to add to the end of the data structure.
     */
    addLast(value: E): void;
    /**
     * The function `pollFirst()` removes and returns the first element in a data structure.
     * @returns The value of the first element in the data structure.
     */
    pollFirst(): E | undefined;
    /**
     * The `peekFirst` function returns the first element in an array-like data structure if it exists.
     * @returns The element at the first position of the `_nodes` array.
     */
    peekFirst(): E | undefined;
    /**
     * The `pollLast()` function removes and returns the last element in a data structure.
     * @returns The value that was removed from the data structure.
     */
    pollLast(): E | undefined;
    /**
     * The `peekLast()` function returns the last element in an array-like data structure.
     * @returns The last element in the array "_nodes" is being returned.
     */
    peekLast(): E | undefined;
    /**
     * The get function returns the element at the specified index in an array-like data structure.
     * @param {number} index - The index parameter is a number that represents the position of the element you want to
     * retrieve from the array.
     * @returns The element at the specified index in the `_nodes` array is being returned. If there is no element at that
     * index, `null` is returned.
     */
    get(index: number): NonNullable<E> | null;
    /**
     * The function checks if the size of a data structure is less than or equal to zero.
     * @returns The method is returning a boolean value indicating whether the size of the object is less than or equal to 0.
     */
    isEmpty(): boolean;
    protected _seNodes(value: {
        [p: number]: E;
    }): void;
    protected _setSize(value: number): void;
}
export declare class ArrayDeque<E> {
    protected _nodes: E[];
    get size(): number;
    /**
     * O(n) time complexity of adding at the beginning and the end
     */
    /**
     * The function "addLast" adds a value to the end of an array.
     * @param {E} value - The value parameter represents the value that you want to add to the end of the array.
     * @returns The return value is the new length of the array after the value has been added.
     */
    addLast(value: E): number;
    /**
     * The function "pollLast" returns and removes the last element from an array, or returns null if the array is empty.
     * @returns The method `pollLast()` returns the last element of the `_nodes` array, or `null` if the array is empty.
     */
    pollLast(): E | null;
    /**
     * The `pollFirst` function removes and returns the first element from an array, or returns null if the array is empty.
     * @returns The `pollFirst()` function returns the first element of the `_nodes` array, or `null` if the array is
     * empty.
     */
    pollFirst(): E | null;
    /**
     * O(n) time complexity of adding at the beginning and the end
     */
    /**
     * The function "addFirst" adds a value to the beginning of an array.
     * @param {E} value - The value parameter represents the value that you want to add to the beginning of the array.
     * @returns The return value of the `addFirst` function is the new length of the array `_nodes` after adding the
     * `value` at the beginning.
     */
    addFirst(value: E): number;
    /**
     * The `peekFirst` function returns the first element of an array or null if the array is empty.
     * @returns The function `peekFirst()` is returning the first element (`E`) of the `_nodes` array. If the array is
     * empty, it will return `null`.
     */
    peekFirst(): E | null;
    /**
     * The `peekLast` function returns the last element of an array or null if the array is empty.
     * @returns The method `peekLast()` returns the last element of the `_nodes` array, or `null` if the array is empty.
     */
    peekLast(): E | null;
    /**
     * O(1) time complexity of obtaining the value
     */
    /**
     * The get function returns the element at the specified index in an array, or null if the index is out of bounds.
     * @param {number} index - The index parameter is a number that represents the position of the element you want to
     * retrieve from the array.
     * @returns The method is returning the element at the specified index in the `_nodes` array. If the element exists, it
     * will be returned. If the element does not exist (i.e., the index is out of bounds), `null` will be returned.
     */
    get(index: number): E | null;
    /**
     * The set function assigns a value to a specific index in an array.
     * @param {number} index - The index parameter is a number that represents the position of the element in the array
     * that you want to set a new value for.
     * @param {E} value - The value parameter represents the new value that you want to set at the specified index in the
     * _nodes array.
     * @returns The value that is being set at the specified index in the `_nodes` array.
     */
    set(index: number, value: E): E;
    /**
     * The insert function adds a value at a specified index in an array.
     * @param {number} index - The index parameter specifies the position at which the value should be inserted in the
     * array. It is a number that represents the index of the array where the value should be inserted. The index starts
     * from 0, so the first element of the array has an index of 0, the second element has
     * @param {E} value - The value parameter represents the value that you want to insert into the array at the specified
     * index.
     * @returns The splice method returns an array containing the removed elements, if any. In this case, since no elements
     * are being removed, an empty array will be returned.
     */
    insert(index: number, value: E): E[];
    /**
     * The remove function removes an element from an array at a specified index.
     * @param {number} index - The index parameter specifies the position of the element to be removed from the array. It
     * is a number that represents the index of the element to be removed.
     * @returns The method is returning an array containing the removed element.
     */
    remove(index: number): E[];
    /**
     * The function checks if an array called "_nodes" is empty.
     * @returns The method `isEmpty()` is returning a boolean value. It returns `true` if the length of the `_nodes` array
     * is 0, indicating that the array is empty. Otherwise, it returns `false`.
     */
    isEmpty(): boolean;
}
