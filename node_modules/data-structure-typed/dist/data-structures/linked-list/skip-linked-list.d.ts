/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
export declare class SkipListNode<K, V> {
    key: K;
    value: V;
    forward: SkipListNode<K, V>[];
    constructor(key: K, value: V, level: number);
}
export declare class SkipList<K, V> {
    get probability(): number;
    set probability(value: number);
    get maxLevel(): number;
    set maxLevel(value: number);
    get level(): number;
    set level(value: number);
    get head(): SkipListNode<K, V>;
    set head(value: SkipListNode<K, V>);
    private _head;
    private _level;
    private _maxLevel;
    private _probability;
    /**
     * The constructor initializes a SkipList with a specified maximum level and probability.
     * @param [maxLevel=16] - The `maxLevel` parameter represents the maximum level that a skip list can have. It determines
     * the maximum number of levels that can be created in the skip list.
     * @param [probability=0.5] - The probability parameter represents the probability of a node being promoted to a higher
     * level in the skip list. It is used to determine the height of each node in the skip list.
     */
    constructor(maxLevel?: number, probability?: number);
    /**
     * The function "randomLevel" generates a random level based on a given probability and maximum level.
     * @returns the level, which is a number.
     */
    private randomLevel;
    /**
     * The add function adds a new node with a given key and value to a Skip List data structure.
     * @param {K} key - The key parameter represents the key of the node that needs to be added to the skip list.
     * @param {V} value - The "value" parameter represents the value associated with the key that is being added to the Skip
     * List.
     */
    add(key: K, value: V): void;
    /**
     * The function `get` retrieves the value associated with a given key from a skip list data structure.
     * @param {K} key - The `key` parameter is the key of the element that we want to retrieve from the data structure.
     * @returns The method `get(key: K)` returns the value associated with the given key if it exists in the data structure,
     * otherwise it returns `undefined`.
     */
    get(key: K): V | undefined;
    /**
     * The `remove` function removes a node with a specific key from a Skip List data structure.
     * @param {K} key - The key parameter represents the key of the node that needs to be removed from the skip list.
     * @returns The `remove` method returns a boolean value. It returns `true` if the key was successfully removed from the
     * skip list, and `false` if the key was not found in the skip list.
     */
    remove(key: K): boolean;
}
