/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
import type { BinaryTreeNodeKey, TreeMultisetNodeNested, TreeMultisetOptions } from '../../types';
import { BinaryTreeDeletedResult, DFSOrderPattern } from '../../types';
import { IBinaryTree } from '../../interfaces';
import { AVLTree, AVLTreeNode } from './avl-tree';
export declare class TreeMultisetNode<V = any, FAMILY extends TreeMultisetNode<V, FAMILY> = TreeMultisetNodeNested<V>> extends AVLTreeNode<V, FAMILY> {
    /**
     * The constructor function initializes a BinaryTreeNode object with a key, value, and count.
     * @param {BinaryTreeNodeKey} key - The `key` parameter is of type `BinaryTreeNodeKey` and represents the unique identifier
     * of the binary tree node.
     * @param {V} [val] - The `val` parameter is an optional parameter of type `V`. It represents the value of the binary
     * tree node. If no value is provided, it will be `undefined`.
     * @param {number} [count=1] - The `count` parameter is a number that represents the number of times a particular value
     * occurs in a binary tree node. It has a default value of 1, which means that if no value is provided for the `count`
     * parameter when creating a new instance of the `BinaryTreeNode` class.
     */
    constructor(key: BinaryTreeNodeKey, val?: V, count?: number);
    count: number;
}
/**
 * The only distinction between a TreeMultiset and a AVLTree lies in the ability of the former to store duplicate nodes through the utilization of counters.
 */
export declare class TreeMultiset<N extends TreeMultisetNode<N['val'], N> = TreeMultisetNode> extends AVLTree<N> implements IBinaryTree<N> {
    /**
     * The constructor function for a TreeMultiset class in TypeScript, which extends another class and sets an option to
     * merge duplicated values.
     * @param {TreeMultisetOptions} [options] - An optional object that contains additional configuration options for the
     * TreeMultiset.
     */
    constructor(options?: TreeMultisetOptions);
    private _count;
    get count(): number;
    /**
     * The function creates a new BSTNode with the given key, value, and count.
     * @param {BinaryTreeNodeKey} key - The key parameter is the unique identifier for the binary tree node. It is used to
     * distinguish one node from another in the tree.
     * @param {N} val - The `val` parameter represents the value that will be stored in the binary search tree node.
     * @param {number} [count] - The "count" parameter is an optional parameter of type number. It represents the number of
     * occurrences of the value in the binary search tree node. If not provided, the count will default to 1.
     * @returns A new instance of the BSTNode class with the specified key, value, and count (if provided).
     */
    createNode(key: BinaryTreeNodeKey, val?: N['val'], count?: number): N;
    /**
     * The function swaps the location of two nodes in a tree data structure.
     * @param {N} srcNode - The source node that we want to swap with the destination node.
     * @param {N} destNode - The `destNode` parameter represents the destination node where the values from `srcNode` will
     * be swapped with.
     * @returns the `destNode` after swapping its values with the `srcNode`.
     */
    swapLocation(srcNode: N, destNode: N): N;
    /**
     * The `add` function adds a new node to a binary search tree, maintaining the tree's properties and balancing if
     * necessary.
     * @param {BinaryTreeNodeKey | N} keyOrNode - The `keyOrNode` parameter can be either a `BinaryTreeNodeKey` or a `N` (which
     * represents a `BinaryTreeNode`).
     * @param [val] - The `val` parameter represents the value to be added to the binary tree node.
     * @param {number} [count] - The `count` parameter is an optional parameter that specifies the number of times the
     * value should be added to the binary tree. If the `count` parameter is not provided, it defaults to 1.
     * @returns The method `add` returns either the inserted node (`N`), `null`, or `undefined`.
     */
    add(keyOrNode: BinaryTreeNodeKey | N | null, val?: N['val'], count?: number): N | null | undefined;
    /**
     * The function adds a new node to a binary tree if there is an available slot on the left or right side of the parent
     * node.
     * @param {N | null} newNode - The `newNode` parameter represents the node that needs to be added to the tree. It can
     * be either a node object (`N`) or `null`.
     * @param {N} parent - The `parent` parameter represents the parent node to which the new node will be added as a
     * child.
     * @returns The method returns either the `parent.left`, `parent.right`, or `undefined`.
     */
    _addTo(newNode: N | null, parent: N): N | null | undefined;
    /**
     * The `addMany` function takes an array of node IDs or nodes and adds them to the tree multiset, returning an array of
     * the inserted nodes.
     * @param {(BinaryTreeNodeKey | null)[] | (N | null)[]} keysOrNodes - An array of BinaryTreeNodeKey or BinaryTreeNode
     * objects, or null values.
     * @param {N['val'][]} [data] - The `data` parameter is an optional array of values (`N['val'][]`) that corresponds to
     * the nodes being added. It is used when adding nodes using the `keyOrNode` and `data` arguments in the `this.add()`
     * method. If provided, the `data` array should
     * @returns The function `addMany` returns an array of `N`, `null`, or `undefined` values.
     */
    addMany(keysOrNodes: (BinaryTreeNodeKey | null)[] | (N | null)[], data?: N['val'][]): (N | null | undefined)[];
    /**
     * The `perfectlyBalance` function takes a binary tree, performs a depth-first search to sort the nodes, and then
     * constructs a balanced binary search tree using either a recursive or iterative approach.
     * @returns The function `perfectlyBalance()` returns a boolean value.
     */
    perfectlyBalance(): boolean;
    /**
     * The `remove` function removes a node from a binary search tree and returns the deleted node along with the parent
     * node that needs to be balanced.
     * @param {N | BinaryTreeNodeKey | null} nodeOrKey - The `nodeOrKey` parameter can be one of the following:
     * @param {boolean} [ignoreCount] - The `ignoreCount` parameter is an optional boolean parameter that determines
     * whether to ignore the count of the node being removed. If `ignoreCount` is set to `true`, the count of the node will
     * not be taken into account when removing it. If `ignoreCount` is set to `false
     * @returns The function `remove` returns an array of `BinaryTreeDeletedResult<N>` objects.
     */
    remove(nodeOrKey: N | BinaryTreeNodeKey, ignoreCount?: boolean): BinaryTreeDeletedResult<N>[];
    /**
     * The function `getSubTreeCount` calculates the number of nodes and the sum of their counts in a subtree, using either
     * recursive or iterative traversal.
     * @param {N | null | undefined} subTreeRoot - The `subTreeRoot` parameter represents the root node of a subtree in a
     * binary tree.
     * @returns The function `getSubTreeCount` returns an array `[number, number]`.
     */
    getSubTreeCount(subTreeRoot: N | null | undefined): [number, number];
    /**
     * The function `subTreeSumCount` calculates the sum of the `count` property of each node in a subtree, either
     * recursively or iteratively.
     * @param {N | BinaryTreeNodeKey | null} subTreeRoot - The `subTreeRoot` parameter represents the root node of a subtree
     * in a binary tree. It can be either a `BinaryTreeNodeKey` (a unique identifier for a node in the binary tree) or
     * `null` if the subtree is empty.
     * @returns the sum of the count values of all nodes in the subtree rooted at `subTreeRoot`.
     */
    subTreeSumCount(subTreeRoot: N | BinaryTreeNodeKey | null): number;
    /**
     * The function `subTreeAddCount` recursively or iteratively traverses a binary tree and adds a given delta value to
     * the `count` property of each node.
     * @param {N | BinaryTreeNodeKey | null} subTreeRoot - The `subTreeRoot` parameter represents the root node of a subtree
     * in a binary tree. It can be either a `BinaryTreeNodeKey` (a unique identifier for a node in the binary tree), a
     * `BinaryTreeNode` object, or `null` if the subtree is empty.
     * @param {number} delta - The delta parameter is a number that represents the amount by which the count of each node
     * in the subtree should be increased or decreased.
     * @returns a boolean value.
     */
    subTreeAddCount(subTreeRoot: N | BinaryTreeNodeKey | null, delta: number): boolean;
    /**
     * The function `getNodesByCount` returns an array of nodes that have a specific count property, either recursively or
     * using a queue.
     * @param {BinaryTreeNodeKey | N} nodeProperty - The `nodeProperty` parameter can be either a `BinaryTreeNodeKey` or a
     * `N`. It represents the property of the nodes that you want to search for.
     * @param {boolean} [onlyOne] - The `onlyOne` parameter is an optional boolean parameter that determines whether to
     * return only one node that matches the `nodeProperty` or all nodes that match the `nodeProperty`. If `onlyOne` is set
     * to `true`, the function will return only one node. If `onlyOne`
     * @returns an array of nodes that match the given nodeProperty.
     */
    getNodesByCount(nodeProperty: BinaryTreeNodeKey | N, onlyOne?: boolean): N[];
    /**
     * The BFSCount function returns an array of counts from a breadth-first search of nodes.
     * @returns The BFSCount() function returns an array of numbers, specifically the count property of each node in the
     * bfs traversal.
     */
    BFSCount(): number[];
    /**
     * The function "listLevelsCount" takes a node and returns an array of arrays, where each inner array contains the
     * count property of each node at that level.
     * @param {N | null} node - The parameter `node` is of type `N | null`. This means that it can either be an instance of
     * the class `N` or `null`.
     * @returns a 2D array of numbers. Each inner array represents a level in the binary tree, and each number in the inner
     * array represents the count property of a node in that level.
     */
    listLevelsCount(node: N | null): number[][];
    /**
     * The `morrisCount` function returns an array of counts for each node in a binary tree, based on a specified traversal
     * pattern.
     * @param {'in' | 'pre' | 'post'} [pattern] - The `pattern` parameter is an optional parameter that specifies the
     * traversal pattern for the Morris traversal algorithm. It can have one of three values: 'in', 'pre', or 'post'.
     * @returns The function `morrisCount` returns an array of numbers.
     */
    morrisCount(pattern?: DFSOrderPattern): number[];
    /**
     * The function dfsCountIterative performs an iterative depth-first search and returns an array of node counts based on
     * the specified traversal pattern.
     * @param {'in' | 'pre' | 'post'} [pattern] - The pattern parameter is a string that specifies the traversal order for
     * the Depth-First Search (dfs) algorithm. It can have three possible values: 'in', 'pre', or 'post'.
     * @returns The dfsCountIterative function returns an array of numbers, which represents the count property of each node
     * in the dfs traversal.
     */
    dfsCountIterative(pattern?: DFSOrderPattern): number[];
    /**
     * The dfsCount function returns an array of counts for each node in a depth-first search traversal.
     * @param {DFSOrderPattern} [pattern] - The pattern parameter is an optional parameter that specifies the order in which
     * the Depth-First Search (dfs) algorithm should traverse the nodes. It can have one of the following values:
     * @returns The dfsCount function returns an array of numbers, specifically the count property of each node in the dfs
     * traversal.
     */
    dfsCount(pattern?: DFSOrderPattern): number[];
    /**
     * The `lesserSumCount` function calculates the sum of the counts of all nodes in a binary tree that have a lesser
     * value than a given node.
     * @param {N | BinaryTreeNodeKey | null} beginNode - The `beginNode` parameter can be one of the following:
     * @returns the sum of the counts of nodes in the binary tree that have a lesser value than the given beginNode.
     */
    lesserSumCount(beginNode: N | BinaryTreeNodeKey | null): number;
    /**
     * The function `allGreaterNodesAddCount` updates the count property of all nodes in a binary tree that have an ID
     * greater than a given ID by a specified delta value.
     * @param {N | BinaryTreeNodeKey | null} node - The `node` parameter can be one of the following:
     * @param {number} delta - The `delta` parameter is a number that represents the amount by which the `count` property
     * of each node should be increased.
     * @returns a boolean value.
     */
    allGreaterNodesAddCount(node: N | BinaryTreeNodeKey | null, delta: number): boolean;
    /**
     * The clear() function clears the data and sets the count to 0.
     */
    clear(): void;
    /**
     * The function "_setCount" is used to set the value of the "_count" property.
     * @param {number} v - number
     */
    protected _setCount(v: number): void;
}
