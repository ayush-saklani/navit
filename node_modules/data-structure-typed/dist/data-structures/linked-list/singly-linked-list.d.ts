/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
export declare class SinglyLinkedListNode<E = any> {
    /**
     * The constructor function initializes an instance of a class with a given value and sets the next property to null.
     * @param {E} val - The "val" parameter is of type E, which means it can be any data type. It represents the value that
     * will be stored in the node of a linked list.
     */
    constructor(val: E);
    private _val;
    get val(): E;
    set val(value: E);
    private _next;
    get next(): SinglyLinkedListNode<E> | null;
    set next(value: SinglyLinkedListNode<E> | null);
}
export declare class SinglyLinkedList<E = any> {
    /**
     * The constructor initializes the linked list with an empty head, tail, and length.
     */
    constructor();
    private _head;
    get head(): SinglyLinkedListNode<E> | null;
    set head(value: SinglyLinkedListNode<E> | null);
    private _tail;
    get tail(): SinglyLinkedListNode<E> | null;
    set tail(value: SinglyLinkedListNode<E> | null);
    private _length;
    get length(): number;
    /**
     * The `fromArray` function creates a new SinglyLinkedList instance and populates it with the elements from the given
     * array.
     * @param {E[]} data - The `data` parameter is an array of elements of type `E`.
     * @returns The `fromArray` function returns a `SinglyLinkedList` object.
     */
    static fromArray<E>(data: E[]): SinglyLinkedList<E>;
    getLength(): number;
    /**
     * The `push` function adds a new node with the given data to the end of a singly linked list.
     * @param {E} data - The "data" parameter represents the value that you want to add to the linked list. It can be of
     * any type (E) as specified in the generic type declaration of the class or function.
     */
    push(data: E): void;
    /**
     * The `pop()` function removes and returns the value of the last element in a linked list, updating the head and tail
     * pointers accordingly.
     * @returns The method `pop()` returns the value of the node that is being removed from the end of the linked list. If
     * the linked list is empty, it returns `null`.
     */
    pop(): E | undefined;
    /**
     * The `shift()` function removes and returns the value of the first node in a linked list.
     * @returns The value of the node that is being removed from the beginning of the linked list.
     */
    shift(): E | undefined;
    /**
     * The unshift function adds a new node with the given value to the beginning of a singly linked list.
     * @param {E} val - The parameter "val" represents the value of the new node that will be added to the beginning of the
     * linked list.
     */
    unshift(val: E): void;
    /**
     * The function `getAt` returns the value at a specified index in a linked list, or null if the index is out of range.
     * @param {number} index - The index parameter is a number that represents the position of the element we want to
     * retrieve from the list.
     * @returns The method `getAt(index: number): E | null` returns the value at the specified index in the linked list, or
     * `null` if the index is out of bounds.
     */
    getAt(index: number): E | undefined;
    /**
     * The function `getNodeAt` returns the node at a given index in a singly linked list.
     * @param {number} index - The `index` parameter is a number that represents the position of the node we want to
     * retrieve from the linked list. It indicates the zero-based index of the node we want to access.
     * @returns The method `getNodeAt(index: number)` returns a `SinglyLinkedListNode<E>` object if the node at the
     * specified index exists, or `null` if the index is out of bounds.
     */
    getNodeAt(index: number): SinglyLinkedListNode<E> | null;
    /**
     * The `deleteAt` function removes an element at a specified index from a linked list and returns the removed element.
     * @param {number} index - The index parameter represents the position of the element that needs to be deleted in the
     * data structure. It is of type number.
     * @returns The method `deleteAt` returns the value of the node that was deleted, or `null` if the index is out of
     * bounds.
     */
    deleteAt(index: number): E | undefined;
    delete(valueOrNode: E): boolean;
    delete(valueOrNode: SinglyLinkedListNode<E>): boolean;
    /**
     * The `insertAt` function inserts a value at a specified index in a singly linked list.
     * @param {number} index - The index parameter represents the position at which the new value should be inserted in the
     * linked list. It is of type number.
     * @param {E} val - The `val` parameter represents the value that you want to insert into the linked list at the
     * specified index.
     * @returns The `insert` method returns a boolean value. It returns `true` if the insertion is successful, and `false`
     * if the index is out of bounds.
     */
    insertAt(index: number, val: E): boolean;
    /**
     * The function checks if the length of a data structure is equal to zero and returns a boolean value indicating
     * whether it is empty or not.
     * @returns A boolean value indicating whether the length of the object is equal to 0.
     */
    isEmpty(): boolean;
    /**
     * The `clear` function resets the linked list by setting the head, tail, and length to null and 0 respectively.
     */
    clear(): void;
    /**
     * The `toArray` function converts a linked list into an array.
     * @returns The `toArray()` method is returning an array of type `E[]`.
     */
    toArray(): E[];
    /**
     * The `reverse` function reverses the order of the nodes in a singly linked list.
     * @returns The reverse() method does not return anything. It has a return type of void.
     */
    reverse(): void;
    /**
     * The `find` function iterates through a linked list and returns the first element that satisfies a given condition.
     * @param callback - A function that takes a value of type E as its parameter and returns a boolean value. This
     * function is used to determine whether a particular value in the linked list satisfies a certain condition.
     * @returns The method `find` returns the first element in the linked list that satisfies the condition specified by
     * the callback function. If no element satisfies the condition, it returns `null`.
     */
    find(callback: (val: E) => boolean): E | null;
    /**
     * The `indexOf` function returns the index of the first occurrence of a given value in a linked list.
     * @param {E} value - The value parameter is the value that you want to find the index of in the linked list.
     * @returns The method is returning the index of the first occurrence of the specified value in the linked list. If the
     * value is not found, it returns -1.
     */
    indexOf(value: E): number;
    /**
     * The function finds a node in a singly linked list by its value and returns the node if found, otherwise returns
     * null.
     * @param {E} value - The value parameter is the value that we want to search for in the linked list.
     * @returns a `SinglyLinkedListNode<E>` if a node with the specified value is found in the linked list. If no node with
     * the specified value is found, the function returns `null`.
     */
    findNode(value: E): SinglyLinkedListNode<E> | null;
    insertBefore(existingValue: E, newValue: E): boolean;
    insertBefore(existingValue: SinglyLinkedListNode<E>, newValue: E): boolean;
    insertAfter(existingValueOrNode: E, newValue: E): boolean;
    insertAfter(existingValueOrNode: SinglyLinkedListNode<E>, newValue: E): boolean;
    /**
     * The function counts the number of occurrences of a given value in a linked list.
     * @param {E} value - The value parameter is the value that you want to count the occurrences of in the linked list.
     * @returns The count of occurrences of the given value in the linked list.
     */
    countOccurrences(value: E): number;
    [Symbol.iterator](): Generator<E, void, unknown>;
}
