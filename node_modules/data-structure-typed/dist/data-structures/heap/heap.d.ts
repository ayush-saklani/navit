/**
 * data-structure-typed
 * @author Kirk Qi
 * @copyright Copyright (c) 2022 Kirk Qi <qilinaus@gmail.com>
 * @license MIT License
 */
import type { HeapComparator, HeapDFSOrderPattern } from '../../types';
export declare class Heap<E> {
    protected nodes: E[];
    private readonly comparator;
    constructor(comparator: HeapComparator<E>);
    /**
     * Insert an element into the heap and maintain the heap properties.
     * @param value - The element to be inserted.
     */
    add(value: E): Heap<E>;
    /**
     * Remove and return the top element (smallest or largest element) from the heap.
     * @returns The top element or null if the heap is empty.
     */
    poll(): E | null;
    /**
     * Float operation to maintain heap properties after adding an element.
     * @param index - The index of the newly added element.
     */
    protected bubbleUp(index: number): void;
    /**
     * Sinking operation to maintain heap properties after removing the top element.
     * @param index - The index from which to start sinking.
     */
    protected sinkDown(index: number): void;
    /**
     * Fix the entire heap to maintain heap properties.
     */
    protected fix(): void;
    /**
     * Peek at the top element of the heap without removing it.
     * @returns The top element or null if the heap is empty.
     */
    peek(): E | null;
    /**
     * Get the size (number of elements) of the heap.
     */
    get size(): number;
    /**
     * Get the last element in the heap, which is not necessarily a leaf node.
     * @returns The last element or null if the heap is empty.
     */
    get leaf(): E | null;
    /**
     * Check if the heap is empty.
     * @returns True if the heap is empty, otherwise false.
     */
    isEmpty(): boolean;
    /**
     * Reset the nodes of the heap. Make the nodes empty.
     */
    clear(): void;
    /**
     * Clear and add nodes of the heap
     * @param nodes
     */
    refill(nodes: E[]): void;
    /**
     * Use a comparison function to check whether a binary heap contains a specific element.
     * @param value - the element to check.
     * @returns Returns true if the specified element is contained; otherwise, returns false.
     */
    has(value: E): boolean;
    /**
     * Depth-first search (DFS) method, different traversal orders can be selectedã€‚
     * @param order - Traversal order parameter: 'in' (in-order), 'pre' (pre-order) or 'post' (post-order).
     * @returns An array containing elements traversed in the specified order.
     */
    dfs(order: HeapDFSOrderPattern): E[];
    /**
     * Convert the heap to an array.
     * @returns An array containing the elements of the heap.
     */
    toArray(): E[];
    getNodes(): E[];
    /**
     * Clone the heap, creating a new heap with the same elements.
     * @returns A new Heap instance containing the same elements.
     */
    clone(): Heap<E>;
    /**
     * Sort the elements in the heap and return them as an array.
     * @returns An array containing the elements sorted in ascending order.
     */
    sort(): E[];
    /**
     * Static method that creates a binary heap from an array of nodes and a comparison function.
     * @param nodes
     * @param comparator - Comparison function.
     * @returns A new Heap instance.
     */
    static heapify<E>(nodes: E[], comparator: HeapComparator<E>): Heap<E>;
}
