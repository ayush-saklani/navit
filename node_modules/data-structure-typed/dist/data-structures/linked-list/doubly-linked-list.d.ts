/**
 * data-structure-typed
 *
 * @author Tyler Zeng
 * @copyright Copyright (c) 2022 Tyler Zeng <zrwusa@gmail.com>
 * @license MIT License
 */
export declare class DoublyLinkedListNode<E = any> {
    /**
     * The constructor function initializes the value, next, and previous properties of an object.
     * @param {E} val - The "val" parameter is the value that will be stored in the node. It can be of any data type, as it
     * is defined as a generic type "E".
     */
    constructor(val: E);
    private _val;
    get val(): E;
    set val(value: E);
    private _next;
    get next(): DoublyLinkedListNode<E> | null;
    set next(value: DoublyLinkedListNode<E> | null);
    private _prev;
    get prev(): DoublyLinkedListNode<E> | null;
    set prev(value: DoublyLinkedListNode<E> | null);
}
export declare class DoublyLinkedList<E = any> {
    /**
     * The constructor initializes the linked list with an empty head, tail, and length.
     */
    constructor();
    private _head;
    get head(): DoublyLinkedListNode<E> | null;
    set head(value: DoublyLinkedListNode<E> | null);
    private _tail;
    get tail(): DoublyLinkedListNode<E> | null;
    set tail(value: DoublyLinkedListNode<E> | null);
    private _length;
    get length(): number;
    /**
     * The `fromArray` function creates a new instance of a DoublyLinkedList and populates it with the elements from the
     * given array.
     * @param {E[]} data - The `data` parameter is an array of elements of type `E`.
     * @returns The `fromArray` function returns a DoublyLinkedList object.
     */
    static fromArray<E>(data: E[]): DoublyLinkedList<E>;
    /**
     * The push function adds a new node with the given value to the end of the doubly linked list.
     * @param {E} val - The value to be added to the linked list.
     */
    push(val: E): void;
    /**
     * The addLast function adds a new node with the given value to the end of the doubly linked list.
     * @param {E} val - The value to be added to the linked list.
     */
    addLast(val: E): void;
    /**
     * The `pop()` function removes and returns the value of the last node in a doubly linked list.
     * @returns The method is returning the value of the removed node (removedNode.val) if the list is not empty. If the
     * list is empty, it returns null.
     */
    pop(): E | undefined;
    /**
     * The `pollLast()` function removes and returns the value of the last node in a doubly linked list.
     * @returns The method is returning the value of the removed node (removedNode.val) if the list is not empty. If the
     * list is empty, it returns null.
     */
    pollLast(): E | undefined;
    /**
     * The `shift()` function removes and returns the value of the first node in a doubly linked list.
     * @returns The method `shift()` returns the value of the node that is removed from the beginning of the doubly linked
     * list.
     */
    shift(): E | undefined;
    /**
     * The `pollFirst()` function removes and returns the value of the first node in a doubly linked list.
     * @returns The method `shift()` returns the value of the node that is removed from the beginning of the doubly linked
     * list.
     */
    pollFirst(): E | undefined;
    /**
     * The unshift function adds a new node with the given value to the beginning of a doubly linked list.
     * @param {E} val - The `val` parameter represents the value of the new node that will be added to the beginning of the
     * doubly linked list.
     */
    unshift(val: E): void;
    /**
     * The addFirst function adds a new node with the given value to the beginning of a doubly linked list.
     * @param {E} val - The `val` parameter represents the value of the new node that will be added to the beginning of the
     * doubly linked list.
     */
    addFirst(val: E): void;
    /**
     * The `peekFirst` function returns the first node in a doubly linked list, or null if the list is empty.
     * @returns The method `peekFirst()` returns the first node of the doubly linked list, or `null` if the list is empty.
     */
    peekFirst(): E | undefined;
    /**
     * The `peekLast` function returns the last node in a doubly linked list, or null if the list is empty.
     * @returns The method `peekLast()` returns the last node of the doubly linked list, or `null` if the list is empty.
     */
    peekLast(): E | undefined;
    get size(): number;
    /**
     * The `getAt` function returns the value at a specified index in a linked list, or null if the index is out of bounds.
     * @param {number} index - The index parameter is a number that represents the position of the element we want to
     * retrieve from the list.
     * @returns The method is returning the value at the specified index in the linked list. If the index is out of bounds
     * or the linked list is empty, it will return null.
     */
    getAt(index: number): E | undefined;
    /**
     * The function `getNodeAt` returns the node at a given index in a doubly linked list, or null if the index is out of
     * range.
     * @param {number} index - The `index` parameter is a number that represents the position of the node we want to
     * retrieve from the doubly linked list. It indicates the zero-based index of the node we want to access.
     * @returns The method `getNodeAt(index: number)` returns a `DoublyLinkedListNode<E>` object if the index is within the
     * valid range of the linked list, otherwise it returns `null`.
     */
    getNodeAt(index: number): DoublyLinkedListNode<E> | null;
    /**
     * The function `findNodeByValue` searches for a node with a specific value in a doubly linked list and returns the
     * node if found, otherwise it returns null.
     * @param {E} val - The `val` parameter is the value that we want to search for in the doubly linked list.
     * @returns The function `findNodeByValue` returns a `DoublyLinkedListNode<E>` if a node with the specified value `val`
     * is found in the linked list. If no such node is found, it returns `null`.
     */
    findNode(val: E): DoublyLinkedListNode<E> | null;
    /**
     * The `insert` function inserts a value at a specified index in a doubly linked list.
     * @param {number} index - The index parameter represents the position at which the new value should be inserted in the
     * DoublyLinkedList. It is of type number.
     * @param {E} val - The `val` parameter represents the value that you want to insert into the Doubly Linked List at the
     * specified index.
     * @returns The `insert` method returns a boolean value. It returns `true` if the insertion is successful, and `false`
     * if the index is out of bounds.
     */
    insertAt(index: number, val: E): boolean;
    /**
     * The `deleteAt` function removes an element at a specified index from a linked list and returns the removed element.
     * @param {number} index - The index parameter represents the position of the element that needs to be deleted in the
     * data structure. It is of type number.
     * @returns The method `deleteAt` returns the value of the node that was deleted, or `null` if the index is out of
     * bounds.
     */
    deleteAt(index: number): E | undefined;
    delete(valOrNode: E): boolean;
    delete(valOrNode: DoublyLinkedListNode<E>): boolean;
    /**
     * The `toArray` function converts a linked list into an array.
     * @returns The `toArray()` method is returning an array of type `E[]`.
     */
    toArray(): E[];
    /**
     * The function checks if a variable has a length greater than zero and returns a boolean value.
     * @returns A boolean value is being returned.
     */
    isEmpty(): boolean;
    /**
     * The `clear` function resets the linked list by setting the head, tail, and length to null and 0 respectively.
     */
    clear(): void;
    /**
     * The `find` function iterates through a linked list and returns the first element that satisfies a given condition.
     * @param callback - A function that takes a value of type E as its parameter and returns a boolean value. This
     * function is used to determine whether a particular value in the linked list satisfies a certain condition.
     * @returns The method `find` returns the first element in the linked list that satisfies the condition specified by
     * the callback function. If no element satisfies the condition, it returns `null`.
     */
    find(callback: (val: E) => boolean): E | null;
    /**
     * The function returns the index of the first occurrence of a given value in a linked list.
     * @param {E} val - The parameter `val` is of type `E`, which means it can be any data type. It represents the value
     * that we are searching for in the linked list.
     * @returns The method `indexOf` returns the index of the first occurrence of the specified value `val` in the linked
     * list. If the value is not found, it returns -1.
     */
    indexOf(val: E): number;
    /**
     * The `findLast` function iterates through a linked list from the last node to the first node and returns the last
     * value that satisfies the given callback function, or null if no value satisfies the callback.
     * @param callback - A function that takes a value of type E as its parameter and returns a boolean value. This
     * function is used to determine whether a given value satisfies a certain condition.
     * @returns The method `findLast` returns the last value in the linked list that satisfies the condition specified by
     * the callback function. If no value satisfies the condition, it returns `null`.
     */
    findLast(callback: (val: E) => boolean): E | null;
    /**
     * The `toArrayReverse` function converts a doubly linked list into an array in reverse order.
     * @returns The `toArrayReverse()` function returns an array of type `E[]`.
     */
    toArrayReverse(): E[];
    /**
     * The `reverse` function reverses the order of the elements in a doubly linked list.
     */
    reverse(): void;
    /**
     * The `forEach` function iterates over each element in a linked list and applies a callback function to each element.
     * @param callback - The callback parameter is a function that takes two arguments: val and index. The val argument
     * represents the value of the current node in the linked list, and the index argument represents the index of the
     * current node in the linked list.
     */
    forEach(callback: (val: E, index: number) => void): void;
    /**
     * The `map` function takes a callback function and applies it to each element in the DoublyLinkedList, returning a new
     * DoublyLinkedList with the transformed values.
     * @param callback - The callback parameter is a function that takes a value of type E (the type of values stored in
     * the original DoublyLinkedList) and returns a value of type U (the type of values that will be stored in the mapped
     * DoublyLinkedList).
     * @returns The `map` function is returning a new instance of `DoublyLinkedList<U>` that contains the mapped values.
     */
    map<U>(callback: (val: E) => U): DoublyLinkedList<U>;
    /**
     * The `filter` function iterates through a DoublyLinkedList and returns a new DoublyLinkedList containing only the
     * elements that satisfy the given callback function.
     * @param callback - The `callback` parameter is a function that takes a value of type `E` and returns a boolean value.
     * It is used to determine whether a value should be included in the filtered list or not.
     * @returns The filtered list, which is an instance of the DoublyLinkedList class.
     */
    filter(callback: (val: E) => boolean): DoublyLinkedList<E>;
    /**
     * The `reduce` function iterates over a linked list and applies a callback function to each element, accumulating a
     * single value.
     * @param callback - The `callback` parameter is a function that takes two arguments: `accumulator` and `val`. It is
     * used to perform a specific operation on each element of the linked list.
     * @param {U} initialValue - The `initialValue` parameter is the initial value of the accumulator. It is the starting
     * point for the reduction operation.
     * @returns The `reduce` method is returning the final value of the accumulator after iterating through all the
     * elements in the linked list.
     */
    reduce<U>(callback: (accumulator: U, val: E) => U, initialValue: U): U;
    insertAfter(existingValueOrNode: E, newValue: E): boolean;
    insertAfter(existingValueOrNode: DoublyLinkedListNode<E>, newValue: E): boolean;
    insertBefore(existingValueOrNode: E, newValue: E): boolean;
    insertBefore(existingValueOrNode: DoublyLinkedListNode<E>, newValue: E): boolean;
}
